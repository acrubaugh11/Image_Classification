# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Im_QVMVJk5c1_ACXhYslu4Qg5VMU9Toe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix, accuracy_score, f1_score
from sklearn.linear_model import LassoCV
from sklearn.metrics import classification_report
import seaborn as sns




image_paths = {
    "image01": '/content/drive/MyDrive/image01.csv',
    "image01_sliding_window": '/content/drive/MyDrive/image01_sliding_window.csv',
    "image012": '/content/drive/MyDrive/image012.csv',
    "image012_sliding_window": '/content/drive/MyDrive/image012_sliding_window.csv',
}

for image_name, path in image_paths.items():
  df = pd.read_csv(path)
  # for features excluding last column
  X = df.iloc[:, :-1]
  X = np.array(X)
  # for last column
  y = df.iloc[:, -1]
  y = np.array(y)


  # Split the data into 80% training and 20% testing
  row, col = X.shape
  TR = round(row * 0.8)
  TT = row - TR

  # Training with 80% data
  X1_train = X[0:TR, :]
  Y1_train = y[0:TR]


  # standardize features
  scaler = StandardScaler()
  # apply scaling to data
  X1_train = scaler.fit_transform(X1_train)
  # create pca model to reduce to 95% of components
  pca1 = PCA(n_components=0.95)
  # fit pca model to data and apply tranformation (dimensonality reduction)
  #Fit pca1 instead of pca
  X11_train= pca1.fit_transform(X1_train)

 # Random Forest Model
  rf = RandomForestClassifier(n_estimators=1000, random_state=42, n_jobs=-1, oob_score=True)
  rf_model = rf.fit(X11_train, Y1_train)
  y_pred_rf = rf_model.predict(X11_train)

  importance = rf_model.feature_importances_
  indices = importance.argsort()[::-1]

  # Metrics for Random Forest
  accuracy_rf = accuracy_score(Y1_train, y_pred_rf)
  f1_rf = f1_score(Y1_train, y_pred_rf, average="binary" if len(np.unique(Y1_train)) == 2 else "weighted")
  cm_rf = confusion_matrix(Y1_train, y_pred_rf)

  # Lasso model
  lasso_model = LassoCV(cv=5, random_state=42, max_iter=100000)
  lasso_model.fit(X11_train, Y1_train)
  y_pred_lasso = np.round(lasso_model.predict(X11_train))

  # Metrics for Lasso
  accuracy_lasso = accuracy_score(Y1_train, y_pred_lasso)
  f1_lasso = f1_score(Y1_train, y_pred_lasso, average="binary" if len(np.unique(Y1_train)) == 2 else "weighted")
  cm_lasso = confusion_matrix(Y1_train, y_pred_lasso)

  # Testing with 20% data
  X1_test = X[TR:row, :]
  y_test = y[TR:row]

  # Standardize the test features
  X1_test = scaler.transform(X1_test)

  # Apply PCA to the test set
  X11_test = pca1.transform(X1_test)

  # Random Forest Prediction on Test Set
  yhat_test_rf = rf_model.predict(X11_test)

  # Lasso Prediction on Test Set
  yhat_test_lasso = np.round(lasso_model.predict(X11_test))


# Evaluate Random Forest
cc_rf_test = confusion_matrix(y_test, yhat_test_rf)
print("\nRandom Forest Evaluation on Test Data")
print("Accuracy (RF):", accuracy_score(y_test, yhat_test_rf))
print("F1 Score (RF):", f1_score(y_test, yhat_test_rf, average="binary" if len(np.unique(y_test)) == 2 else "weighted"))
print("Confusion Matrix (RF):\n", cc_rf_test)
print("\nRandom Forest Classification Report:")
print(classification_report(y_test, yhat_test_rf))

# Evaluate Lasso
cc_lasso_test = confusion_matrix(y_test, yhat_test_lasso)
print("\nLasso Evaluation on Test Data")
print("Accuracy (Lasso):", accuracy_score(y_test, yhat_test_lasso))
print("F1 Score (Lasso):", f1_score(y_test, yhat_test_lasso, average="binary" if len(np.unique(y_test)) == 2 else "weighted"))
print("Confusion Matrix (Lasso):\n", cc_lasso_test)
print("\nLasso Classification Report:")
print(classification_report(y_test, yhat_test_lasso))


# Confusion Matrices
# Random Forest Confusion Matrix
sns.heatmap(cc_rf_test, annot=True, fmt="d", cmap="Blues", xticklabels=["Pred: 0", "Pred: 1"], yticklabels=["True: 0", "True: 1"])
plt.title("Random Forest Confusion Matrix")
plt.show()

# Lasso Confusion Matrix
sns.heatmap(cc_lasso_test, annot=True, fmt="d", cmap="Blues", xticklabels=["Pred: 0", "Pred: 1"], yticklabels=["True: 0", "True: 1"])
plt.title("Lasso Confusion Matrix")
plt.show()